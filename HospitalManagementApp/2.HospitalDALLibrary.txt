using Microsoft.Data.SqlClient;

namespace HospitalDALLibrary
{
    internal class MyConnection
    {
        static SqlConnection? connection;

        public static SqlConnection GetConnection()
        {
            if (connection == null)
            {
                connection = new SqlConnection(@"Server=AS1KHLSL4P3T;TrustServerCertificate=True;Integrated Security=True;Database=HospitalDB;");
            }
            return connection;
        }
    }
}

======================================================================

namespace HospitalDALLibrary
{
    public interface IRepository<K, T> where T : class
    {
        T? Add(T entity);
        IEnumerable<T> GetAll();
        T? Get(K key);
        T? Update(K key, T entity);
        void Delete(K key);
    }
}

=========================================================================

using System.Data;
using HospitalModelLibrary;
using Microsoft.Data.SqlClient;

namespace HospitalDALLibrary
{
    public class PatientRepository : IRepository<int, Patient>
    {
        private readonly SqlConnection _connection;

        public PatientRepository()
        {
            _connection = MyConnection.GetConnection();
        }

        public Patient? Add(Patient patient)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("InsertPatient", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("@name", patient.Name);
                    command.Parameters.AddWithValue("@gender", patient.Gender);
                    command.Parameters.AddWithValue("@age", patient.Age);
                    command.Parameters.AddWithValue("@mobile", patient.Mobile);

                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    return rowsAffected > 0 ? patient : null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while adding patient: {ex.Message}");
                return null;
            }
            finally
            {
                _connection.Close();
            }
        }

        public IEnumerable<Patient> GetAll()
        {
            var patients = new List<Patient>();

            try
            {
                using (SqlCommand command = new SqlCommand("GetAllPatients", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    _connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            patients.Add(new Patient()
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Gender = reader.GetString(2),
                                Age = reader.GetInt32(3),
                                Mobile = reader.GetString(4)
                            });

                        }
                    }
                    _connection.Close();

                    if (!patients.Any())
                    {
                        throw new EmptyCollectionException("No patients found.");
                    }
                }
            }
            catch (EmptyCollectionException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while retrieving patients: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }

            return patients;
        }

        public Patient? Get(int id)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("GetPatientById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);

                    _connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Patient
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Gender = reader.GetString(2),
                                Age = reader.GetInt32(3),
                                Mobile = reader.GetString(4)
                            };
                        }
                        else
                        {
                            throw new CannotFindEntityException($"Patient with ID {id} not found.");
                        }
                    }
                }
            }
            catch (CannotFindEntityException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while retrieving patient with ID {id}: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }

            return null;
        }

        public Patient? Update(int id, Patient patient)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("UpdatePatientById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);
                    command.Parameters.AddWithValue("@name", patient.Name);
                    command.Parameters.AddWithValue("@gender", patient.Gender);
                    command.Parameters.AddWithValue("@age", patient.Age);
                    command.Parameters.AddWithValue("@mobile", patient.Mobile);

                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    if (rowsAffected == 0)
                    {
                        throw new CannotFindEntityException($"Patient with ID {id} not found.");
                    }

                    return patient;
                }
            }
            catch (CannotFindEntityException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while updating patient with ID {id}: {ex.Message}");
                return null;
            }
            finally 
            { 
                _connection.Close(); 
            }

        }
        public void Delete(int id)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("DeletePatientById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);

                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    if (rowsAffected == 0)
                    {
                        throw new CannotFindEntityException($"Patient with ID {id} not found.");
                    }
                    else
                    {
                        Console.WriteLine($"Patient with ID {id} has been successfully deleted.");
                    }
                }
            }
            catch (CannotFindEntityException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while deleting patient with ID {id}: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }
        }
    }
}

=====================================================================

using System.Data;
using HospitalModelLibrary;
using Microsoft.Data.SqlClient;

namespace HospitalDALLibrary
{
    public class AppointmentRepository : IRepository<int, Appointment>
    {
        private readonly SqlConnection _connection;

        public AppointmentRepository()
        {
            _connection = MyConnection.GetConnection();
        }

        public Appointment? Add(Appointment appointment)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("InsertAppointment", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("@patientId", appointment.PatientId);
                    command.Parameters.AddWithValue("@doctorId", appointment.DoctorId);
                    command.Parameters.AddWithValue("@appointmentDateTime", appointment.AppointmentDateTime);
                    command.Parameters.AddWithValue("@appointmentReason", appointment.AppointmentReason);

                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    return rowsAffected > 0 ? appointment : null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while adding appointment: {ex.Message}");
                return null;
            }
            finally
            {
                _connection.Close();
            }
        }

        public IEnumerable<Appointment> GetAll()
        {
            var appointments = new List<Appointment>();

            try
            {
                using (SqlCommand command = new SqlCommand("GetAllAppointments", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    _connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            appointments.Add(new Appointment
                            {
                                Id = reader.GetInt32(0),
                                PatientId = reader.GetInt32(1),
                                DoctorId = reader.GetInt32(2),
                                AppointmentDateTime = reader.GetDateTime(3),
                                AppointmentReason = reader.GetString(4)
                            });
                        }
                    }
                    _connection.Close();

                    if (!appointments.Any())
                    {
                        throw new EmptyCollectionException("No appointments found.");
                    }
                }
            }
            catch (EmptyCollectionException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while retrieving appointments: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }

            return appointments;
        }

        public Appointment? Get(int id)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("GetAppointmentById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);

                    _connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Appointment
                            {
                                Id = reader.GetInt32(0),
                                PatientId = reader.GetInt32(1),
                                DoctorId = reader.GetInt32(2),
                                AppointmentDateTime = reader.GetDateTime(3),
                                AppointmentReason = reader.GetString(4)
                            };
                        }
                        else
                        {
                            throw new CannotFindEntityException($"Appointment with ID {id} not found.");
                        }
                    }
                }
            }
            catch (CannotFindEntityException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while retrieving appointment with ID {id}: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }

            return null;
        }

        public Appointment? Update(int id, Appointment appointment)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("UpdateAppointmentById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("@id", id);
                    command.Parameters.AddWithValue("@patientId", appointment.PatientId);
                    command.Parameters.AddWithValue("@doctorId", appointment.DoctorId);
                    command.Parameters.AddWithValue("@appointmentDateTime", appointment.AppointmentDateTime);
                    command.Parameters.AddWithValue("@appointmentReason", appointment.AppointmentReason);

                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    if (rowsAffected == 0)
                    {
                        throw new CannotFindEntityException($"Appointment with ID {id} not found.");
                    }

                    return appointment;
                }
            }
            catch (CannotFindEntityException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while updating appointment with ID {id}: {ex.Message}");
                return null;
            }
            finally
            {
                _connection.Close();
            }
        }

        public void Delete(int id)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("DeleteAppointmentById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);

                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    if (rowsAffected == 0)
                    {
                        throw new CannotFindEntityException($"Appointment with ID {id} not found.");
                    }
                    else
                    {
                        Console.WriteLine($"Appointment with ID {id} has been successfully deleted.");
                    }
                }
            }
            catch (CannotFindEntityException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while deleting appointment with ID {id}: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }
        }
    }
}

==========================================================================

using HospitalModelLibrary;

namespace HospitalDALLibrary
{
    public interface IDoctorRepository : IRepository<int, Doctor>
    {
        IEnumerable<Doctor> GetSpecializedDoctors(string specialization);
    }
}

=============================================================================

using System.Data;
using HospitalModelLibrary;
using Microsoft.Data.SqlClient;

namespace HospitalDALLibrary
{
    public class DoctorRepository : IDoctorRepository
    {
        private readonly SqlConnection _connection;
        public DoctorRepository()
        {
            _connection = MyConnection.GetConnection();
        }

        public Doctor? Add(Doctor doctor)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("AddDoctor", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@name", doctor.Name);
                    command.Parameters.AddWithValue("@gender", doctor.Gender);
                    command.Parameters.AddWithValue("@age", doctor.Age);
                    command.Parameters.AddWithValue("@specialization", doctor.Specialization);
                    command.Parameters.AddWithValue("@mobile", doctor.Mobile);

                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    return rowsAffected > 0 ? doctor : null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while adding doctor: {ex.Message}");
                return null;
            }
            finally
            {
                _connection.Close();
            }
        }

        public IEnumerable<Doctor> GetAll()
        {
            var doctors = new List<Doctor>();

            try
            {
                using (SqlCommand command = new SqlCommand("GetAllDoctors", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    _connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            doctors.Add(new Doctor
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Gender = reader.GetString(2),
                                Age = reader.GetInt32(3),
                                Specialization = reader.GetString(4),
                                Mobile = reader.GetString(5)
                            });
                        }
                    }
                    _connection.Close();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while retrieving doctors: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }

            return doctors;
        }

        public IEnumerable<Doctor> GetSpecializedDoctors(string specialization)
        {
            var doctors = new List<Doctor>();

            try
            {
                using (SqlCommand command = new SqlCommand("GetDoctorsBySpecialization", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@specialization", specialization);

                    _connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            doctors.Add(new Doctor
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Gender = reader.GetString(2),
                                Age = reader.GetInt32(3),
                                Specialization = reader.GetString(4),
                                Mobile = reader.GetString(5)
                            });
                        }
                    }
                    _connection.Close();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while retrieving doctors: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }

            return doctors;
        }

        public Doctor? Get(int id)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("GetDoctorById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);

                    _connection.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Doctor
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Gender = reader.GetString(2),
                                Age = reader.GetInt32(3),
                                Specialization = reader.GetString(4),
                                Mobile = reader.GetString(5)
                            };
                        }
                        else
                        {
                            throw new CannotFindEntityException($"Doctor with ID {id} not found.");
                        }
                    }
                }

            }
            catch (CannotFindEntityException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw; 
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while retrieving doctor with ID {id}: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }

            return null;
        }

        public Doctor? Update(int id, Doctor doctor)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("UpdateDoctorById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);
                    command.Parameters.AddWithValue("@name", doctor.Name);
                    command.Parameters.AddWithValue("@gender", doctor.Gender);
                    command.Parameters.AddWithValue("@age", doctor.Age);
                    command.Parameters.AddWithValue("@specialization", doctor.Specialization);
                    command.Parameters.AddWithValue("@mobile", doctor.Mobile);
                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    return rowsAffected > 0 ? doctor : null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while updating doctor with ID {id}: {ex.Message}");
                return null;
            }
            finally
            {
                _connection.Close();
            }
        }

        public void Delete(int id)
        {
            try
            {
                using (SqlCommand command = new SqlCommand("DeleteDoctorById", _connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@id", id);
                    _connection.Open();
                    int rowsAffected = command.ExecuteNonQuery();
                    _connection.Close();

                    if (rowsAffected == 0)
                    {
                        Console.WriteLine($"No doctor found with the provided Id: {id}.");
                    }
                    else
                    {
                        Console.WriteLine($"Doctor with ID {id} has been successfully deleted.");

                    }
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while deleting doctor with ID {id}: {ex.Message}");
            }
            finally
            {
                _connection.Close();
            }
        }
    }
}
