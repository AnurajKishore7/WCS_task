using EmployeeBLLibrary;
using EmployeeDALLibrary;
using EmployeeModelLibrary;
using System;

namespace EmployeeApp
{
    internal class Program
    {
        static void Main(string[] args)
        {
            IRepository<int, Employee> employeeRepository = new EmployeeRepository();
            IRepository<int, Department> departmentRepository = new DepartmentRepository();
            IManageDepartments manageDepartments = new EmployeeManagemet(departmentRepository, employeeRepository);
            IManageEmployee manageEmployee = (IManageEmployee)manageDepartments;

            bool continueApp = true;

            while (continueApp)
            {
                Console.WriteLine("\nEmployee Management System");
                Console.WriteLine("1) Add Department");
                Console.WriteLine("2) Add Employee");
                Console.WriteLine("3) Get Employees by Department");
                Console.WriteLine("4) Exit");
                Console.Write("Choose an option: ");

                if (!int.TryParse(Console.ReadLine(), out int choice) || choice < 1 || choice > 4)
                {
                    Console.WriteLine("Invalid input. Please enter a number between 1 and 4.");
                    continue;
                }

                switch (choice)
                {
                    case 1:
                        AddDepartment(manageDepartments);
                        break;

                    case 2:
                        AddEmployee(manageEmployee, manageDepartments);
                        break;

                    case 3:
                        GetEmployeesByDepartment(manageEmployee);
                        break;

                    case 4:
                        continueApp = false;
                        Console.WriteLine("Exiting the application. Goodbye!");
                        break;
                }
            }
        }

        private static void AddDepartment(IManageDepartments manageDepartments)
        {
            try
            {
                Console.Write("Enter Department Name: ");
                string name = Console.ReadLine();

                Console.Write("Enter Department Status: ");
                string status = Console.ReadLine();

                if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(status))
                {
                    Console.WriteLine("Department name and status cannot be empty.");
                    return;
                }

                Department department = new Department
                {
                    Name = name,
                    Status = status
                };

                Department addedDepartment = manageDepartments.AddDeparment(department);
                Console.WriteLine("Department added successfully!");
                Console.WriteLine(addedDepartment);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private static void AddEmployee(IManageEmployee manageEmployee, IManageDepartments manageDepartments)
        {
            try
            {
                Console.Write("Enter Employee Name: ");
                string name = Console.ReadLine();

                Console.Write("Enter Employee Age: ");
                if (!int.TryParse(Console.ReadLine(), out int age) || age <= 0)
                {
                    Console.WriteLine("Invalid age. Please enter a valid positive number.");
                    return;
                }

                Console.Write("Enter Department ID: ");
                if (!int.TryParse(Console.ReadLine(), out int departmentId) || departmentId <= 0)
                {
                    Console.WriteLine("Invalid Department ID. Please enter a valid positive number.");
                    return;
                }

                Console.Write("Enter Employee Salary: ");
                if (!float.TryParse(Console.ReadLine(), out float salary) || salary <= 0)
                {
                    Console.WriteLine("Invalid salary. Please enter a valid positive number.");
                    return;
                }

                Employee employee = new Employee
                {
                    Name = name,
                    Age = age,
                    DepartmentId = departmentId,
                    Salary = salary
                };

                Employee addedEmployee = manageEmployee.AddEmployee(employee);
                Console.WriteLine("Employee added successfully!");
                Console.WriteLine(addedEmployee);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private static void GetEmployeesByDepartment(IManageEmployee manageEmployee)
        {
            try
            {
                Console.Write("Enter Department ID: ");
                if (!int.TryParse(Console.ReadLine(), out int departmentId) || departmentId <= 0)
                {
                    Console.WriteLine("Invalid Department ID. Please enter a valid positive number.");
                    return;
                }

                var employees = manageEmployee.GetEmployeeByDepartent(departmentId);
                if (employees.Count == 0)
                {
                    Console.WriteLine("No employees found in this department.");
                    return;
                }

                Console.WriteLine("Employees in Department:");
                foreach (var employee in employees)
                {
                    Console.WriteLine(employee);
                }
            }
            catch (EmptyCollectionException ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }
}
